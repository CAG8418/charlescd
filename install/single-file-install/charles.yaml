---
# Source: darwin-application/templates/secret-lab.yaml
apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6IHsicmVhbHdhdmVsYWIuYXp1cmVjci5pbyI6IHsiYXV0aCI6ICJjbVZoYkhkaGRtVnNZV0k2TDNWVk4xQkNlbGhHZWsxc2RteGlVVnBYVkVoUVFWQnhhak00YW1aTVZqRT0ifX19
kind: Secret
metadata:
  name: realwavelab-registry
  namespace: charles
type: kubernetes.io/dockerconfigjson
---
# Source: darwin-application/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: application-aes256-key
type: Opaque
data:
  encryption-key: OGVhMzY4OGYtYmUxOS00YWU2LTljNmMtZDFhNjAzNjAyYTJm
---
# Source: darwin-application/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: darwin-application
    service: darwin-application
  name: darwin-application
  namespace: charles
spec:
  ports:
    - name: http
      port: 8080
      targetPort: 8080
    
  selector:
    app: darwin-application
---
# Source: darwin-application/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: darwin-application
  namespace: charles
  labels:
    app: darwin-application
    version: darwin-application
spec:
  replicas: 1
  selector:
    matchLabels:
      app: darwin-application
      version: darwin-application
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: 'true' 
      labels:
        app: darwin-application
        version: darwin-application
    spec:
      serviceAccountName: default
      initContainers:
        - name: postgres
          image: postgres:alpine
          command: ['sh', '-c', "until pg_isready -U postgres -h postgresql; do echo notReady; sleep 2;done"]
      
      containers:
        - name: darwin-application
          image: "realwavelab.azurecr.io/darwin-application:darwin-workspace-rc-13"
          
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /actuator/health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /actuator/health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
          
          imagePullPolicy: 
          
          env:
          - name: SPRING_PROFILES_ACTIVE
            value: "k8s"
          - name: DB_URL
            value: "jdbc:postgresql://postgresql:5432/charlesmoove"
          - name: DB_USERNAME
            value: "postgres"
          - name: DB_PASSWORD
            value: "firstpassword"
          - name: KEYCLOCK_REALM
            value: "darwin"
          - name: KEYCLOAK_SERVER_URL
            value: "http://keycloak-http/auth"
          - name: KEYCLOAK_CLIENT_ID
            value: "realm-darwin"
          - name: KEYCLOAK_CLIENT_SECRET
            value: "f2dc9337-9aaf-461f-9c7f-d02a0439ae4d"
          - name: ORIGIN_HOSTS
            value: "http://localhost:3000,http://localhost:3001,http://localhost:8081,http://localhost:8080,https://charles.continuousplatform.com"
          
          - name: ENCRYPTION_KEY
            valueFrom:
              secretKeyRef:
                name: application-aes256-key
                key: encryption-key
          
          
                    
          resources:
            limits:
              cpu: 1
              memory: 1536Mi
            requests:
              cpu: 128m
              memory: 128Mi
     
     
     
     
      imagePullSecrets:
      - name: realwavelab-registry
---
# Source: darwin-deploy/templates/secrets.yaml
apiVersion: v1
data:
  encryption-key: QzYzOUE1NzJFMTRENTA3NUM1MjZGRERENDNFNEVDRjZCMDk1RUExNzc4M0QzMkVGM0QyNzEwQUY5RjM1OURENA==
kind: Secret
metadata:
  name: deploy-aes256-key
type: Opaque
---
# Source: darwin-deploy/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: darwin-deploy
    service: darwin-deploy
  name: darwin-deploy
  namespace: charles
spec:
  ports:
    - name: http
      port: 3000
      targetPort: 3000
    
  selector:
    app: darwin-deploy
---
# Source: darwin-deploy/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: darwin-deploy
  namespace: charles
  labels:
    app: darwin-deploy
    version: darwin-deploy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: darwin-deploy
      version: darwin-deploy
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: 'true' 
      labels:
        app: darwin-deploy
        version: darwin-deploy
    spec:
      serviceAccountName: default
      initContainers:
        - name: postgres
          image: postgres:alpine
          command: ['sh', '-c', "until pg_isready -U postgres -h postgresql; do echo notReady; sleep 2;done"]
      
      containers:
        - name: darwin-deploy
          image: "realwavelab.azurecr.io/darwin-deploy:darwin-release-darwin-workspace-rc-5"
          
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthcheck
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthcheck
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
          
          imagePullPolicy: 
          
          env:
          - name: CONSUL_HOST
            value: "consul-server"
          - name: DATABASE_HOST
            value: "postgresql"
          - name: DATABASE_PORT
            value: "5432"
          - name: DATABASE_USER
            value: "postgres"
          - name: DATABASE_PASS
            value: "firstpassword"
          - name: DATABASE_NAME
            value: "charlesdeploy"
          - name: MOOVE_URL
            value: "http://darwin-application:8080"
          - name: DARWIN_NOTIFICATION_URL
            value: "http://darwin-deploy.charles.svc.cluster.local:3000/notifications"
          - name: DARWIN_UNDEPLOYMENT_CALLBACK
            value: "http://darwin-deploy.charles.svc.cluster.local:3000/notifications/undeployment"
          - name: DARWIN_DEPLOYMENT_CALLBACK
            value: "http://darwin-deploy.charles.svc.cluster.local:3000/notifications/deployment"
          - name: SPINNAKER_URL
            value: "https://darwin-spinnaker-gate.continuousplatform.com"
          - name: SPINNAKER_GITHUB_ACCOUNT
            value: "github-artifact"
          
          - name: ENCRYPTION_KEY
            valueFrom:
              secretKeyRef:
                name: deploy-aes256-key
                key: encryption-key
          
          
                    
          resources:
            limits:
              cpu: 1
              memory: 1536Mi
            requests:
              cpu: 128m
              memory: 128Mi
     
     
     
     
      imagePullSecrets:
      - name: realwavelab-registry
---
# Source: darwin-notifications/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: darwin-notifications
    service: darwin-notifications
  name: darwin-notifications
  namespace: charles
spec:
  ports:
    - name: http
      port: 8080
      targetPort: 8080
    
  selector:
    app: darwin-notifications
---
# Source: darwin-notifications/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: darwin-notifications
  namespace: charles
  labels:
    app: darwin-notifications
    version: darwin-notifications
spec:
  replicas: 1
  selector:
    matchLabels:
      app: darwin-notifications
      version: darwin-notifications
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: 'true' 
      labels:
        app: darwin-notifications
        version: darwin-notifications
    spec:
      serviceAccountName: default
      initContainers:
        - name: postgres
          image: postgres:alpine
          command: ['sh', '-c', "until pg_isready -U postgres -h postgresql; do echo notReady; sleep 2;done"]
      
      containers:
        - name: darwin-notifications
          image: "realwavelab.azurecr.io/darwin-notifications:darwin-release-darwin-workspace-rc-5"
          
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /actuator/health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /actuator/health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
          
          imagePullPolicy: 
          
          env:
          - name: SPRING_PROFILES_ACTIVE
            value: "k8s"
          - name: DB_URL
            value: "jdbc:postgresql://postgresql:5432/charlesnotifications"
          - name: DB_USERNAME
            value: "postgres"
          - name: DB_PASSWORD
            value: "firstpassword"
          
          
                    
          resources:
            limits:
              cpu: 1
              memory: 1536Mi
            requests:
              cpu: 128m
              memory: 128Mi
     
     
     
     
      imagePullSecrets:
      - name: realwavelab-registry
---
# Source: darwin-ui-legacy/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: darwin-ui-legacy
    service: darwin-ui-legacy
  name: darwin-ui-legacy
  namespace: charles
spec:
  ports:
    - name: http
      port: 3000
      targetPort: 3000
    
  selector:
    app: darwin-ui-legacy
---
# Source: darwin-ui-legacy/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: darwin-ui-legacy
  namespace: charles
  labels:
    app: darwin-ui-legacy
    version: darwin-ui-legacy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: darwin-ui-legacy
      version: darwin-ui-legacy
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: 'true' 
      labels:
        app: darwin-ui-legacy
        version: darwin-ui-legacy
    spec:
      serviceAccountName: default
      containers:
        - name: darwin-ui-legacy-web
          image: "realwavelab.azurecr.io/darwin-ui-legacy:darwin-workspace-rc-12"
          
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
          
          imagePullPolicy: 
          
          env:
          - name: HOST
            value: "/moove"
          - name: NOTIFICATION
            value: "/notifications"
          - name: KEYCLOAK
            value: "/keycloak"
          - name: CIRCLE_MATCHER
            value: "/darwin-circle-matcher"
          
          
                    
          resources:
            limits:
              cpu: 1
              memory: 1536Mi
            requests:
              cpu: 128m
              memory: 128Mi
     
     
     
     
      imagePullSecrets:
      - name: realwavelab-registry
---
# Source: darwin-ui-new/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: darwin-ui-new
    service: darwin-ui-new
  name: darwin-ui-new
  namespace: charles
spec:
  ports:
    - name: http
      port: 3000
      targetPort: 3000
    
  selector:
    app: darwin-ui-new
---
# Source: darwin-ui-new/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: darwin-ui-new
  namespace: charles
  labels:
    app: darwin-ui-new
    version: darwin-ui-new
spec:
  replicas: 1
  selector:
    matchLabels:
      app: darwin-ui-new
      version: darwin-ui-new
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: 'true' 
      labels:
        app: darwin-ui-new
        version: darwin-ui-new
    spec:
      serviceAccountName: default
      containers:
        - name: darwin-ui-new-web
          image: "realwavelab.azurecr.io/darwin-ui-new:darwin-workspace-rc-12"
          
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
          
          imagePullPolicy: 
          
          env:
          - name: REACT_APP_API_URI
            value: "/"
          
          
                    
          resources:
            limits:
              cpu: 1
              memory: 1536Mi
            requests:
              cpu: 128m
              memory: 128Mi
     
     
     
     
      imagePullSecrets:
      - name: realwavelab-registry
---
# Source: darwin-villager/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: darwin-villager
    service: darwin-villager
  name: darwin-villager
  namespace: charles
spec:
  ports:
    - name: http
      port: 8080
      targetPort: 8080
    
  selector:
    app: darwin-villager
---
# Source: darwin-villager/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: darwin-villager
  namespace: charles
  labels:
    app: darwin-villager
    version: darwin-villager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: darwin-villager
      version: darwin-villager
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: 'true' 
      labels:
        app: darwin-villager
        version: darwin-villager
    spec:
      serviceAccountName: default
      initContainers:
        - name: postgres
          image: postgres:alpine
          command: ['sh', '-c', "until pg_isready -U postgres -h postgresql; do echo notReady; sleep 2;done"]
      
      containers:
        - name: darwin-villager
          image: "realwavelab.azurecr.io/darwin-villager:darwin-release-darwin-workspace-rc-5"
          
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
          
          imagePullPolicy: 
          
          env:
          - name: SPRING_PROFILES_ACTIVE
            value: "k8s"
          - name: DARWIN_VILLAGER_DB_URI
            value: "jdbc:postgresql://postgresql:5432/charlesvillager"
          - name: DARWIN_VILLAGER_DB_USERNAME
            value: "postgres"
          - name: DARWIN_VILLAGER_DB_PASSWORD
            value: "firstpassword"
          - name: DARWIN_BUILD_TIMEOUT
            value: "15"
          - name: DARWIN_MOOVE_ORGANIZATION
            value: "zup"
          - name: CRYPT_KEY
            value: "pvMPbPPNNB"
          
          
                    
          resources:
            limits:
              cpu: 1
              memory: 1536Mi
            requests:
              cpu: 128m
              memory: 128Mi
     
     
     
     
      imagePullSecrets:
      - name: realwavelab-registry
---
# Source: keycloak/templates/realm-keycloak.yaml
apiVersion: v1
data:
  alegria.json: 
kind: Secret
metadata:
  name: realm-secret
  namespace: charles
type: Opaque
---
# Source: keycloak/templates/secret-db.yaml
apiVersion: v1
kind: Secret
metadata:
  name: keycloak-db
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-7.5.1
    app.kubernetes.io/instance: "keycloak"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  password: ""
  username: "a2V5Y2xvYWs="
---
# Source: keycloak/templates/secret-keycloak.yaml
apiVersion: v1
kind: Secret
metadata:
  name: keycloak-http
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-7.5.1
    app.kubernetes.io/instance: "keycloak"
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  password: "Zmlyc3RwYXNzd29yZA=="
---
# Source: keycloak/templates/configmap-sh.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: keycloak-sh
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-7.5.1
    app.kubernetes.io/instance: "keycloak"
    app.kubernetes.io/managed-by: Helm
data:
  keycloak.sh: |
    #!/usr/bin/env bash

    set -o errexit
    set -o nounset

    exec /opt/jboss/tools/docker-entrypoint.sh -b 0.0.0.0 -Dkeycloak.migration.action=import -Dkeycloak.migration.provider=singleFile -Dkeycloak.migration.file=/realm/alegria.json -Dkeycloak.migration.strategy=OVERWRITE_EXISTING -c standalone.xml
---
# Source: keycloak/templates/configmap-startup.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: keycloak-startup
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-7.5.1
    app.kubernetes.io/instance: "keycloak"
    app.kubernetes.io/managed-by: Helm
data:
  keycloak.cli: |
    embed-server --std-out=echo
    batch
    # Changes the base path to be /keycloak.basepath instead of /auth
    /subsystem=keycloak-server:write-attribute(name=web-context,value=keycloak/auth)
  
    ## Sets the node identifier to the node name (= pod name). Node identifiers have to be unique. They can have a
    ## maximum length of 23 characters. Thus, the chart's fullname template truncates its length accordingly.
    /subsystem=transactions:write-attribute(name=node-identifier, value=${jboss.node.name})
    
    
    # Allow log level to be configured via environment variable
    /subsystem=logging/console-handler=CONSOLE:write-attribute(name=level, value=${env.WILDFLY_LOGLEVEL:INFO})
    /subsystem=logging/root-logger=ROOT:write-attribute(name=level, value=${env.WILDFLY_LOGLEVEL:INFO})
    
    # Add dedicated eventsListener config element to allow configuring elements.
    /subsystem=keycloak-server/spi=eventsListener:add()
    /subsystem=keycloak-server/spi=eventsListener/provider=jboss-logging:add(enabled=true)
    
    # Propagate success events to INFO instead of DEBUG, to expose successful logins for log analysis
    /subsystem=keycloak-server/spi=eventsListener/provider=jboss-logging:write-attribute(name=properties.success-level,value=info)
    /subsystem=keycloak-server/spi=eventsListener/provider=jboss-logging:write-attribute(name=properties.error-level,value=warn)
    
    
    # Configure datasource to use explicit query timeout in seconds
    /subsystem=datasources/data-source=KeycloakDS/:write-attribute(name=query-timeout,value=${env.DB_QUERY_TIMEOUT:300})
    
    # Configure datasource to connection before use
    /subsystem=datasources/data-source=KeycloakDS/:write-attribute(name=validate-on-match,value=${env.DB_VALIDATE_ON_MATCH:true})
    
    # Configure datasource to try all other connections before failing
    /subsystem=datasources/data-source=KeycloakDS/:write-attribute(name=use-fast-fail,value=${env.DB_USE_CAST_FAIL:false})
    
    

    run-batch
    stop-embedded-server
---
# Source: keycloak/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: keycloak-headless
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-7.5.1
    app.kubernetes.io/instance: "keycloak"
    app.kubernetes.io/managed-by: Helm
    service: headless
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 8080
      targetPort: http
      protocol: TCP
    - name: https
      port: 8443
      targetPort: https
      protocol: TCP
  selector:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: "keycloak"
---
# Source: keycloak/templates/service-http.yaml
apiVersion: v1
kind: Service
metadata:
  name: keycloak-http
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-7.5.1
    app.kubernetes.io/instance: "keycloak"
    app.kubernetes.io/managed-by: Helm
    service: http
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8080
      targetPort: http
      protocol: TCP
    - name: https
      port: 8443
      targetPort: https
      protocol: TCP
  selector:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/instance: "keycloak"
---
# Source: keycloak/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: keycloak
  labels:
    app.kubernetes.io/name: keycloak
    helm.sh/chart: keycloak-7.5.1
    app.kubernetes.io/instance: "keycloak"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: keycloak
      app.kubernetes.io/instance: "keycloak"
  replicas: 1
  serviceName: keycloak-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: keycloak
        app.kubernetes.io/instance: "keycloak"
      annotations:
        checksum/config-sh: 8328b573ffc22b6734ec4d5a6f48f62391cfd16ca6b0259ae9080211dc867e23
        checksum/config-startup: 1784d16ed7609d3834d6a6529dc345f3a44a51ba26f85341c629faf2aadd53fd
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
    spec:
      restartPolicy: Always
      serviceAccountName: default
      securityContext:
        fsGroup: 1000
      containers:
        - name: keycloak
          image: "jboss/keycloak:9.0.2"
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
          command:
            - /scripts/keycloak.sh
          lifecycle:
            # postStart:
            #   exec:
            #     command: ["/bin/sh", "-c", "/bin/add-user-keycloak.sh -r darwin -u charlesadmin@zup.com.br -p 123mudar"]
            
          env:
            - name: KEYCLOAK_USER
              value: keycloak
            - name: KEYCLOAK_PASSWORD_FILE
              value: /secrets/password
            - name: JAVA_TOOL_OPTIONS
              value: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=50.0"
            - name: PROXY_ADDRESS_FORWARDING
              value: "true"
            
            - name: DB_VENDOR
              value: "postgres"
            - name: DB_ADDR
              value: "mykeycloak"
            - name: DB_PORT
              value: "5432"
            - name: DB_DATABASE
              value: "keycloak"
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: keycloak-db
                  key: "username"
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak-db
                  key: "password"
            - name: PROXY_ADDRESS_FORWARDING
              value: "true"
            - name: DB_USER
              value: "postgres"
            - name: DB_PASSWORD
              value: "firstpassword"
            - name: DB_VENDOR
              value: "POSTGRES"
            - name: DB_PORT
              value: "5432"
            - name: DB_ADDR
              value: "postgresql"
            - name: DB_DATABASE
              value: "keycloak"
            - name: DB_SCHEMA
              value: "public"
            
          volumeMounts:
            - name: sh
              mountPath: /scripts
              readOnly: true
            - name: secrets
              mountPath: /secrets
              readOnly: true
            - name: startup
              mountPath: /opt/jboss/startup-scripts
              readOnly: true
            - name: realm-secret
              mountPath: "/realm/"
              readOnly: true
            
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: https
              containerPort: 8443
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /keycloak/auth/
              port: http
            initialDelaySeconds: 300
            timeoutSeconds: 5
            
          readinessProbe:
            httpGet:
              path: /keycloak/auth/realms/master
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 1
            
          resources:
            {}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: keycloak
                  app.kubernetes.io/instance: "keycloak"
                matchExpressions:
                  - key: role
                    operator: NotIn
                    values:
                      - test
              topologyKey: kubernetes.io/hostname
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: keycloak
                    app.kubernetes.io/instance: "keycloak"
                  matchExpressions:
                    - key: role
                      operator: NotIn
                      values:
                        - test
                topologyKey: failure-domain.beta.kubernetes.io/zone
        
      terminationGracePeriodSeconds: 60
      volumes:
        - name: sh
          configMap:
            name: keycloak-sh
            defaultMode: 0555
        - name: secrets
          secret:
            secretName: keycloak-http
        - name: startup
          configMap:
            name: keycloak-startup
            defaultMode: 0555
        - name: realm-secret
          secret:
            secretName: realm-secret
---
# Source: postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: postgresql
  labels:
    app: postgresql
    chart: postgresql-8.9.0
    release: "postgresql"
    heritage: "Helm"
type: Opaque
data:
  postgresql-password: "Zmlyc3RwYXNzd29yZA=="
---
# Source: postgresql/templates/initialization-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-init-scripts
  labels:
    app: postgresql
    chart: postgresql-8.9.0
    release: "postgresql"
    heritage: "Helm"
data:
  my_init_script.sql: |
    CREATE DATABASE charlesmoove;
  
  
    CREATE DATABASE charlesdeploy;
  
  
    CREATE DATABASE charlesvillager;
  
  
    CREATE DATABASE charlesnotifications;
  
    CREATE DATABASE keycloak;
---
# Source: postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgresql-headless
  labels:
    app: postgresql
    chart: postgresql-8.9.0
    release: "postgresql"
    heritage: "Helm"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "postgresql"
---
# Source: postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  labels:
    app: postgresql
    chart: postgresql-8.9.0
    release: "postgresql"
    heritage: "Helm"
  annotations:
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    release: "postgresql"
    role: master
---
# Source: postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql-postgresql
  labels:
    app: postgresql
    chart: postgresql-8.9.0
    release: "postgresql"
    heritage: "Helm"
  annotations:
spec:
  serviceName: postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgresql
      release: "postgresql"
      role: master
  template:
    metadata:
      name: postgresql
      labels:
        app: postgresql
        chart: postgresql-8.9.0
        release: "postgresql"
        heritage: "Helm"
        role: master
    spec:      
      securityContext:
        fsGroup: 1001
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:11.7.0-debian-10-r77
          imagePullPolicy: "IfNotPresent"
          resources:
            requests:
              cpu: 250m
              memory: 256Mi
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql
                  key: postgresql-password
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
              subPath: 
      volumes:
        - name: custom-init-scripts
          configMap:
            name: postgresql-init-scripts
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: nginx/templates/nginx-conf.yaml
apiVersion: v1
data:
  nginx.conf: "user       nginx;  \nworker_processes  5;  \nworker_rlimit_nofile 8192;\nevents
    {\n  worker_connections  4096;\n}\n\nhttp {\n   index    index.html index.htm
    index.php;\n   \n   default_type application/octet-stream;\n   log_format   main
    '$remote_addr - $remote_user [$time_local]  $status '\n    '\"$request\" $body_bytes_sent
    \"$http_referer\" '\n    '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n    sendfile
    \    on;\n    tcp_nopush   on;\n    server_names_hash_bucket_size 128;\n    server
    { \n        listen 80;\n        \n        location / {\n            proxy_pass
    \  http://darwin-ui-legacy:3000;\n        }\n\n        location /v2 {\n          rewrite
    /v2/(.*) /$1  break;\n          proxy_pass    http://darwin-ui-new:3000;\n        }\n\n
    \       location /moove {\n          rewrite /moove/(.*) /$1  break;\n          proxy_pass
    \     http://darwin-application:8080;\n        }\n\n        location /notifications
    {\n          rewrite /notifications/(.*) /$1 break;\n          proxy_pass      http://darwin-notifications:8080;\n
    \       }   \n\n        location ^~ /keycloak {\n          proxy_set_header X-Forwarded-For
    $host;\n          proxy_set_header\n          X-Forwarded-Proto $scheme;\n          proxy_set_header
    Upgrade $http_upgrade;\n          proxy_set_header Connection ‘upgrade’;\n          proxy_set_header
    Host $host;\n          proxy_pass      http://keycloak-http:8080;\n        }  \n\n
    \   }\n\n}"
kind: ConfigMap
metadata:
  name: confnginx
  namespace: charles
---
# Source: nginx/templates/nginx-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: nginx
  name: nginx
  namespace: charles
spec:
  externalTrafficPolicy: Cluster
  ports:
  - nodePort: 30803
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: nginx
  sessionAffinity: None
  type: LoadBalancer
status:
  loadBalancer: {}
---
# Source: nginx/templates/nginx.deployment.yaml
apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: nginx
  labels:
    app: nginx     
spec:
  selector:
    matchLabels:
      app: nginx
  replicas: 1 # tells deployment to run 2 pods matching the template
  template: # create pods using pod definition in this template
    metadata:
      # unlike pod-nginx.yaml, the name is not included in the meta data as a unique name is
      # generated from the deployment name
      labels:
        app: nginx     
    spec:
      containers:
        - name: nginx
          image: nginx:alpine
          ports:
          - containerPort: 80        
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
      volumes:
        - name: nginx-config
          configMap:
            name: confnginx
